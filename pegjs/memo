Program プログラム全体を指す
  ExpressionStatement 式文
    AssignmentExoression=代入式
    BinaryExpression=2項式
    PipelineExpression=パイプライン式
    RelationExpression=関係式
    TildaExpression=チルダ式
      Literal リテラル
        NumericLiteral 数値リテラル
        NullLiteral Nullリテラル
        BooleanLiteral 
        StringLiteral 文字列リテラル
        ArrayLiteral 配列リテラル
      Identifier 識別子
        word 名前
      ReservedWord 予約語
        Token トークン
          FlaseToken falseトークン
          NullToken nullトークン
          TrueToken trueトークン
          Operator オペレーター
            RelationOperator <= = >= 関係演算子

代入　
1 -> a; リテラル -> 識別子
() => {} -> func; 関数 -> 識別子
cat.x -> num_x; メソッド -> 識別子
Event.new name:"ねこ" -> cat; メソッド -> 識別子
cat.move x:10, y:10 -> aaa; エラー
a |> func -> ans; パイプライン式 -> 識別子
パイプライン
a |> func; パラメータ |> 識別子
{a,b} |> func; パラメータs |> 識別子
{x:a, y:b} |> func; パラメータs |> 識別子
cat.x |> func; メソッド |> 識別子
cat.x |> cat.y; メソッド |> メソッド
メソッド
cat.x; 
cat.walk 10;
cat.move x:10,y:10;
true.while {}
{ a < 10 }.if {}
{ 1~10 }.each (i)=>{}
Event.new name:"ねこ" 代入必須
Program = compstmt = stmt*
  stmt = _ expr _ 
    expr = right "->" left ";"
         / right "|>" left ";"
         / method
method = _ Object"."CallMethod _ OptionalParameter _
1. Object
  1.1. Class = [A-Z][a-z]* 先頭が大文字の文字列がクラスを表す
  1.2. block = "{" _ ExpressionStatement _ "}" {}に囲まれた式文
  1.3. Literal
2. CallMethod = [a-zA-Z_]* メソッド名
3. OptionalParameter
  3.1. block
  3.2. Parameters = Parameter+ 一回以上の繰り返し
    3.2.1. Parameter = _ word _ ":" _ Literal _ "," _ / _ word _ ":" _ Literal _ ";" _
ーーーーーーーーーーーーメソッド呼び出しーーーーーーーーーーーー
start 
	= program

program
	= Object period CallMethod Parameters

Object 
	= Class
    / Literal
	/ BlockStatement
    
CallMethod
	= word
    
Parameters
	= BlockStatement
	/ Parameter+
    
BlockStatement
	= "{" _ "}"
Parameter
	= _ word  colon  Literal _ comma _
    /  _ word  colon  Literal _ end _
    / _ end _
    
Class
	= [A-Z][a-zA-Z0-9_]*
    
Literal
	= NumberLiteral
    / StringLiteral
    / BooleanLiteral

NumberLiteral
	= Integer
    / Float
    
Float
	= Integer frac digit
    
Integer
	= signe? digit19 digits
    / signe digit
    / digit

digit19 = [1-9]
digit = [0-9]
digits = digit+
signe
  = "+"
  / "-"
frac 
	= period
    
word
	= word:[a-zA-z][0-9a-zA-Z]*
    
StringLiteral
	= '"' word '"'
    
BooleanLiteral
	= truetoken
    / falsetoken

truetoken = "true"

falsetoken = "false"

comma
	= [,]

period
	= [.]

colon
	= [:]
    
end
	= [;]
    
_ "whitespace"
	= [ \t\n\r]*
